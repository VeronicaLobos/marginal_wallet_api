"""Add aprox_date and description to PlannedExpense

Revision ID: 9bd4727f09df
Revises: 7ea78da7a117
Create Date: 2025-06-14 22:52:46.453135

"""
from typing import Sequence, Union

import sqlmodel

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '9bd4727f09df'
down_revision: Union[str, None] = '7ea78da7a117'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('activitylog', sa.Column('movement_id', sa.Integer(), nullable=False))
    op.drop_constraint(op.f('activitylog_transaction_id_key'), 'activitylog', type_='unique')
    op.create_unique_constraint(None, 'activitylog', ['movement_id'])
    op.drop_constraint(op.f('activitylog_transaction_id_fkey'), 'activitylog', type_='foreignkey')
    op.create_foreign_key(None, 'activitylog', 'movement', ['movement_id'], ['id'])
    op.drop_column('activitylog', 'transaction_id')
    op.add_column('plannedexpense', sa.Column('aprox_date', sa.Date(), nullable=False))
    op.add_column('plannedexpense', sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False))
    op.drop_column('plannedexpense', 'date')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('plannedexpense', sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_column('plannedexpense', 'description')
    op.drop_column('plannedexpense', 'aprox_date')
    op.add_column('activitylog', sa.Column('transaction_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'activitylog', type_='foreignkey')
    op.create_foreign_key(op.f('activitylog_transaction_id_fkey'), 'activitylog', 'movement', ['transaction_id'], ['id'])
    op.drop_constraint(None, 'activitylog', type_='unique')
    op.create_unique_constraint(op.f('activitylog_transaction_id_key'), 'activitylog', ['transaction_id'], postgresql_nulls_not_distinct=False)
    op.drop_column('activitylog', 'movement_id')
    # ### end Alembic commands ###
